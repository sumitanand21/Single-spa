worker_processes auto;
events {
    worker_connections 8000;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format compression '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $upstream_addr '
    '"$http_referer" "$http_user_agent"';
    server {
        # listen 3000;
        # listen      8443 ssl http2 default_server;
        listen 80;
        # the domain name it will serve for
        server_name _; # substitute your machine's IP address or FQDN
        charset utf-8;

        # ssl_certificate     /secrets/server.crt;
        # ssl_certificate_key /secrets/server.key;
        # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        # ssl_ciphers         HIGH:!aNULL:!MD5;
        # add_header Strict-Transport-Security "max-age=31536000" always;
        access_log /var/log/nginx/access.log compression;
        root /usr/share/nginx/html;
        # index index.html index.html;
        location ~ /index.html|.*\.json$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            expires -1;
            add_header Cache-Control 'no-store, no-cache, must-revalidate,
            proxy-revalidate, max-age=0';
        }

        location / {
            add_header 'Access-Control-Allow-Origin' '*' always;
            if (!-e $request_filename) {
                rewrite ^(.*)$ /index.html break;
            }
        }
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header 'Cache-Control' 'public';
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
        }
        location ~* \.(?:css|js)$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            try_files $uri =404;
            expires 1y;
            access_log off;
        }
        location ~ ^.+\..+$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            try_files $uri =404;
        }
        location ^~ /backend/ {
            error_log /var/log/nginx/download.error.log debug;
            add_header 'Access-Control-Allow-Origin' "*" always;
            add_header 'Access-Control-Allow-Credentials' "true" always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "*" always;
                add_header 'Access-Control-Allow-Credentials' "true" always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain charset=UTF-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }

            # rewrite ^/backend/([0-9]+)/(.*)$ /$2 break;
            # rewrite ^/backend/(https|http):/(.*):([0-9]+)/(.*)$ /$4 break;
            rewrite ^/backend/(https|http):/([^/]+)/(.*)$ /$3 break;
            # proxy_pass http://$host:$1;
            proxy_pass $1://$2;
            proxy_redirect off;
            proxy_set_header host $host;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_set_header X-real-ip $remote_addr;
            proxy_set_header X-forward-for $proxy_add_x_forwarded_for;

        }

    }
}
