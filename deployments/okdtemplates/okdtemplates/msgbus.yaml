apiVersion: v1
kind: Template
metadata:
   name: kafka
   annotations:
     description: kafka and zookeper for openshift
     tags: "messaging,datastore"
parameters:
- description: Number of Kafka cluster nodes which will be deployed
  displayName: Number of Kafka cluster nodes
  name: KAFKA_NODE_COUNT
  required: true
  value:
- description: Number of Zookeper cluster nodes which will be deployed 
  displayName: Number of Zookeper cluster nodes
  name: ZOOKEEPER_NODE_COUNT
  required: true
  value:
- description: Image repository name
  displayName: Repository Name
  name: DOCKER_REGISTRY
  value:  
- description: Kafka image name
  displayName: Kafka image Name
  name: KAFKA_IMAGE_NAME
  value: 
- description: Kafka image tag
  displayName: Kafka image tag
  name: KAFKA_IMAGE_TAG
  value: 
- description: Zookeper image name
  displayName: Zookeper image Name
  name: ZOOKEPER_IMAGE_NAME
  value: 
- description: Zookeper image tag
  displayName: Zookeper image tag
  name: ZOOKEPER_IMAGE_TAG
  value: 
- description: Storage size for PVC
  displayName: Storage size 
  name: STORAGE_SIZE
  value: 
- description: Storage class name used for nfs 
  displayName: Storage class
  name: STORAGE_CLASS
  value: manual
- description: Replacing the value with project name will help in giving correct DNS name for connection of kafka with zookeper 
  displayName: Replace value with Project Name 
  name: NAMESPACE
  value: msgbus
- description: ip address of NFS server
  displayName: NFS server
  name: NFS_SERVER
  value: 
objects:
- apiVersion: v1
  data:
    client.cnxns: "200"
    init: "10"
    jvm.heap: 2G
    purge.interval: "0"
    snap.retain: "3"
    sync: "5"
    tick: "2000"
  kind: ConfigMap
  metadata:
    name: zk-cm
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kafka
    name: kafka-svc
  spec:
    clusterIP: None
    ports:
    - name: server
      port: 9093
      protocol: TCP
      targetPort: 9093
    selector:
      app: kafka
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: zk-svc
    name: zk-svc
  spec:
    clusterIP: None
    ports:
    - name: leaderelection
      port: 3888
      protocol: TCP
      targetPort: 3888
    - name: server
      port: 2888
      protocol: TCP
      targetPort: 2888
    selector:
      app: zk
    sessionAffinity: None
    type: ClusterIP
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    name: kafka-pdb
  spec:
    selector:
      matchLabels:
        app: kafka
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    name: zk-pdb
  spec:
    selector:
      matchLabels:
        app: zk
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: kafka-0
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/kafka/kafkaOut-0
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: kafka-1
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/kafka/kafkaOut-1
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: kafka-2
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/kafka/kafkaOut-2
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: kafka-3
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/kafka/kafkaOut-3
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: kafka-4
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/kafka/kafkaOut-4
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: zk-0
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/ZK/zkOut-0
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: zk-1
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/ZK/zkOut-1
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: zk-2
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/ZK/zkOut-2
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: zk-3
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/ZK/zkOut-3
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    finalizers:
    - kubernetes.io/pv-protection
    name: zk-4
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: ${STORAGE_SIZE}
    nfs:
      path: /mnt/k8sMount/ZK/zkOut-4
      server: ${NFS_SERVER}
    persistentVolumeReclaimPolicy: Retain
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-kafka-0
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: kafka-0
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-kafka-1
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: kafka-1
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-kafka-2
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: kafka-2
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-kafka-3
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: kafka-3
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-kafka-4
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: kafka-4
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-zk-0
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: zk-0
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-zk-1
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: zk-1
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-zk-2
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: zk-2
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-zk-3
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: zk-3
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    name: datadir-zk-4
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ""
    volumeName: zk-4
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: kafka
    name: kafka
  spec:
    podManagementPolicy: OrderedReady
    replicas: ${KAFKA_NODE_COUNT}
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kafka
    serviceName: kafka-svc
    template:
      metadata:
        labels:
          app: kafka
      spec:
        affinity:
          podAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - zk
                topologyKey: statefulset.kubernetes.io/pod-name
              weight: 1
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kafka
              topologyKey: statefulset.kubernetes.io/pod-name
        containers:
        - command:
           - sh
           - -c
           - 'exec kafka-server-start.sh /opt/kafka/config/server.properties --override
             broker.id=${HOSTNAME##*-} --override listeners=INTERNAL_PLAINTEXT://:9093
             --override zookeeper.connect=zk-0.zk-svc.${NAMESPACE}.svc.cluster.local:2181,zk-1.zk-svc.${NAMESPACE}.svc.cluster.local:2181,zk-2.zk-svc.${NAMESPACE}.svc.cluster.local:2181,zk-3.zk-svc.${NAMESPACE}.svc.cluster.local:2181,zk-4.zk-svc.${NAMESPACE}.svc.cluster.local:2181,
             --override log.dirs=/var/lib/kafka --override listener.security.protocol.map=INTERNAL_PLAINTEXT:PLAINTEXT
             --override advertised.listeners=INTERNAL_PLAINTEXT://:9093 --override inter.broker.listener.name=INTERNAL_PLAINTEXT 
             --override default.replication.factor=2 --override
              num.partitions=10 --override offsets.topic.replication.factor=2'
          env:
          - name: KAFKA_HEAP_OPTS
            value: -Xmx2048M -Xms2048M
          - name: KAFKA_OPTS
            value: -Dlogging.level=INFO
          image: ${DOCKER_REGISTRY}/${KAFKA_IMAGE_NAME}:${KAFKA_IMAGE_TAG}
          imagePullPolicy: Always
          name: k8skafka
          ports:
          - containerPort: 9093
            name: server
            protocol: TCP
          resources:
            limits:
              cpu: "3"
              memory: 5Gi
            requests:
              cpu: "2"
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kafka
            name: datadir
        dnsPolicy: ClusterFirst
        nodeSelector:
          nodetype: apps
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        terminationGracePeriodSeconds: 300
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: datadir
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: ${STORAGE_SIZE}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: zk
    name: zk
  spec:
    podManagementPolicy: Parallel
    replicas: ${ZOOKEEPER_NODE_COUNT}
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: zk
    serviceName: zk-svc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: zk
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - zk
              topologyKey: statefulset.kubernetes.io/pod-name
        containers:
        - command:
          - sh
          - -c
          - zkGenConfig.sh && zkServer.sh start-foreground
          env:
          - name: ZK_REPLICAS
            value: ${ZOOKEEPER_NODE_COUNT}
          - name: ZK_HEAP_SIZE
            valueFrom:
              configMapKeyRef:
                key: jvm.heap
                name: zk-cm
          - name: ZK_TICK_TIME
            valueFrom:
              configMapKeyRef:
                key: tick
                name: zk-cm
          - name: ZK_INIT_LIMIT
            valueFrom:
              configMapKeyRef:
                key: init
                name: zk-cm
          - name: ZK_SYNC_LIMIT
            valueFrom:
              configMapKeyRef:
                key: tick
                name: zk-cm
          - name: ZK_MAX_CLIENT_CNXNS
            valueFrom:
              configMapKeyRef:
                key: client.cnxns
                name: zk-cm
          - name: ZK_SNAP_RETAIN_COUNT
            valueFrom:
              configMapKeyRef:
                key: snap.retain
                name: zk-cm
          - name: ZK_PURGE_INTERVAL
            valueFrom:
              configMapKeyRef:
                key: purge.interval
                name: zk-cm
          - name: ZK_CLIENT_PORT
            value: "2181"
          - name: ZK_SERVER_PORT
            value: "2888"
          - name: ZK_ELECTION_PORT
            value: "3888"
          image: ${DOCKER_REGISTRY}/${ZOOKEPER_IMAGE_NAME}:${ZOOKEPER_IMAGE_TAG}
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - zkOk.sh
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: k8szk
          ports:
          - containerPort: 2181
            name: client
            protocol: TCP
          - containerPort: 3888
            name: leaderelection
            protocol: TCP
          - containerPort: 2888
            name: server
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - zkOk.sh
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "2"
              memory: 5Gi
            requests:
              cpu: "1"
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/zookeeper
            name: datadir
        dnsPolicy: ClusterFirst
        nodeSelector:
          nodetype: apps
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        terminationGracePeriodSeconds: 30
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: ${STORAGE_SIZE}
        storageClassName: ${STORAGE_CLASS}
